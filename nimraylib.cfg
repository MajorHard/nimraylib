[n.global]
output = nimraylib

[n.include]
nimraylib/src

[n.prepare]
gitremote = "https://github.com/raysan5/raylib"
gitsparse = """
src/*
"""

[raylib.h]
preprocess = true
defines = true
recurse = true

pragma = "passL: \"-lraylib\""
pragma-lin = "passL: \"-lGL -lm -lpthread -ldl -lrt -lX11\"" 

[nimraylib/raylib.nim]
search.bool = "_Bool"
replace.bool = "bool"

search.semi = ";"
replace.semi = ","

search.audobuffer = "  AudioStream*"
prepend.audiobuffer = "  rAudioBuffer* = object\n"

search.vargs = """
  TraceLogCallback* = proc (logType: cint, text: cstring, args: va_list) {.stdcall.}
"""
replace.vargs = """
  TraceLogCallback* = proc (logType: cint, text: cstring) {.stdcall, varargs.}
"""

search.keys = "key: cint"
replace.keys = "key: KeyboardKey or AndroidButton"

search.gamepad = "(gamepad: cint)"
replace.gamepad = "(gamepad: GamepadNumber)"

search.gamepad_button = "gamepad: cint, button: cint"
replace.gamepad_button = "gamepad: GamepadNumber, button: GamepadButton"

search.gamepad_axis = "gamepad: cint, axis: cint"
replace.gamepad_axis = "gamepad: GamepadNumber, axis: GamepadAxis"

search.mouse_button = "(button: cint)"
replace.mouse_button = "(button: MouseButton)"

search.key_pressed = "GetKeyPressed*(): cint"
replace.key_pressed = "GetKeyPressed*(): KeyboardKey or AndroidButton"

search.type_key = "Key: cint"
replace.type_key = "Key: KeyboardKey"

search.gesture_key = "gesture: cint"
replace.gesture_key = "gesture: GestureType"

search.config_flags = "flags: cuint"
replace.config_flags = "flags: ConfigFlag"

search.log_types = "logType: cint"
replace.log_types = "logType: TraceLogType"

search.camera_mode = "camera: Camera, mode: cint"
replace.camera_mode = "camera: Camera, mode: CameraMode"

search.blend_mode = "BeginBlendMode*(mode: cint)"
replace.blend_mode = "BeginBlendMode*(mode: BlendMode)"


search.camera_struct = """
  Camera3D* {.importc: "Camera3D", header: headerraylib, bycopy.} = object
    position* {.importc: "position".}: Vector3
    target* {.importc: "target".}: Vector3
    up* {.importc: "up".}: Vector3
    fovy* {.importc: "fovy".}: cfloat
    `type`* {.importc: "type".}: cint
"""
replace.camera_struct = """
  Camera3D* {.importc: "Camera3D", header: headerraylib, bycopy.} = object
    position* {.importc: "position".}: Vector3
    target* {.importc: "target".}: Vector3
    up* {.importc: "up".}: Vector3
    fovy* {.importc: "fovy".}: cfloat
    `type`* {.importc: "type".}: CameraType
"""

search.npatch_struct = """
  NPatchInfo* {.importc: "NPatchInfo", header: headerraylib, bycopy.} = object
    sourceRec* {.importc: "sourceRec".}: Rectangle
    left* {.importc: "left".}: cint
    top* {.importc: "top".}: cint
    right* {.importc: "right".}: cint
    bottom* {.importc: "bottom".}: cint
    `type`* {.importc: "type".}: cint
"""
replace.npatch_struct = """
  NPatchInfo* {.importc: "NPatchInfo", header: headerraylib, bycopy.} = object
    sourceRec* {.importc: "sourceRec".}: Rectangle
    left* {.importc: "left".}: cint
    top* {.importc: "top".}: cint
    right* {.importc: "right".}: cint
    bottom* {.importc: "bottom".}: cint
    `type`* {.importc: "type".}: NPatchType
"""


search.font_type = "charsCount: cint, `type`: cint"
replace.font_type = "charsCount: cint, `type`: FontType"

search.uniform_type = "uniformType: cint"
replace.uniform_type = "uniformType: ShaderUniformDataType"

search.uniform_loc = "uniformLoc: cint"
replace.uniform_loc = "uniformLoc: cint"

search.gesture = "GetGestureDetected*(): cint",
replace.gesture = "GetGestureDetected*(): GestureType",

search.cint = "cint"
replace.cint = "int32"
